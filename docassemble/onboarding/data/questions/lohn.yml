#---
#default language: de
---
metadata:
  documentation: "https://docassemble.org/docs/recipes.html#language selector"
  example start: 1
  example end: 5
#---
#modules:
#  - .test
---
translations:
  - lohn_ro.xlsx
#  - multi_lang_de_en.xlsx
#  - multi_lang_de_es.xlsx
#  - multi_lang_es.xlsx
---
metadata:
  title:
    de: Neueinstellung 
    ro: Angajare nouă
---
objects:
  - company_logo: DAStaticFile.using(filename='logo_kanzleispaeth_middle.gif')
---
mandatory: True
code: |
  #set_parts(title='Kanzlei Späth KG StBG', logo='<img src="' + company_logo.url_for() + '" style="height: 20px; width: 157px;">')
---
imports:
  - qrcode
---
objects:
  - myQR: DAFile
---
default screen parts:
  navigation bar html: |
    <li class="nav-item dropdown">
      <a class="nav-link dropdown-toggle" href="#" id="languageSelector" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        <img src="${ url_of('docassemble.demo:data/static/united-kingdom.svg') }" style="width:20px;" /><img src="${ url_of('docassemble.demo:data/static/germany.svg') }" style="margin-left:-5px;width:20px;" />
      </a>
      <div class="dropdown-menu" aria-labelledby="languageSelector">
        <a class="dropdown-item" href="${ url_action('set_lang', lang='en') }">[FILE docassemble.demo:data/static/united-kingdom.svg, 20px] English</a>
        <a class="dropdown-item" href="${ url_action('set_lang', lang='ro') }">[FILE docassemble.demo:data/static/romania.svg, 20px] Romania</a>
        <a class="dropdown-item" href="${ url_action('set_lang', lang='de') }">[FILE docassemble.demo:data/static/germany.svg, 20px] Deutsch</a>
      </div>
    </li>
  #help label: |
  #  About
  #continue button label: |
  #  Go to next step
  #subtitle: |
  #  A _groovy_ interview
  #pre: |
  #  Neueinstellung in ${ company_name }
  #post: |
  #  [BR]
  #  [BR]
  #  [BR]    
  #  Für ${ company_name } von der // Kanzlei Späth
features:
  #javascript:
  #  - gui-vfd.js
  #css:
  #  - gui-vfd.css
  #bootstrap theme: https://bootswatch.com/5/flatly/bootstrap.min.css
  #https://bootswatch.com/5/cosmo/bootstrap.min.css
  #https://bootswatch.com/5/flatly/bootstrap.min.css
  go full screen: True
  centered: False
  show progress bar percentage: True
  navigation: True
  labels above fields: True
---
objects:
  - userdata: DAStore
---
mandatory: True
code: |
  multi_user = True
---
interview help: |
  # Lohn-Ticket
  Mit diesem Tool können Sie alle notwendigen Daten eines neuen Arbeitnehmers bei diesem erfragen und automatisch an unsere Kanzlei weiterleiten. Es ist unsere Zwischenlösung bis die Datev-Lösung verfügbar sein wird (ca. 3 Jahre). 
  - Dadurch müssen keine Excel-Lösungen mehr hin und her geschickt werden. 
  - Sie können auf das aufwendige nachfassen und übertragen der Mitarbeiterdaten verzichten.
  - Sie müssen sich keine Sorgen um den Datenschutz machen.
  
  Ihr Kanzlei Späth-Team 
  
  Datenschutz
  Änderungsprotokoll
---
objects:
  - user: Individual.using(language='de')
---
objects:
  - userdata: DAStore
---
initial: True
code: |
  company = "tho.spaeth@gmail.com"
  company_name = "Das darf nicht hard gecodet werden"
  set_language(user.language)
  job_list = ['Fenster putzen', 'Katze kraulen']
---
event: set_lang
code: |
  if action_argument('lang') in ('en', 'ro', 'de'):
    user.language = action_argument('lang')
    set_save_status('overwrite')
---
include:
  - lohn_employer.yml
  - lohn_employee.yml
  - lohn_templates.yml
---
initial: True
sets: company_name
code: |
  if user_logged_in():
    # Eigenschaften des Mandanten
    logo = company_logo
    #userdata.get("prefs3").user_picture
    company_name = userdata.get("prefs3").company_name
  
  import pandas as pd
  (models_path, mimetype) = path_and_mimetype('data/sources/countries.csv')
  df_models = pd.read_csv(models_path, sep=',')
  myoptions = [{r[1]: r[2]} for r in df_models.itertuples()]
---
initial: True
code: |
  job_list = ['Nase bohren', 'Rücken kratzen']
---
event: nationalities
code: | 
  set_save_status('ignore')
  wordstart = action_argument('wordstart').lower()
  results = list()
  
  from docassemble.base.util import path_and_mimetype
  import csv, sys
  from docassemble.webapp.files import SavedFile
  from docassemble.webapp.file_access import get_info_from_file_number, get_info_from_file_reference, reference_exists
  import pandas as pd
  
  (models_path, mimetype) = path_and_mimetype('data/sources/countries.csv')
  df_models = pd.read_csv(models_path, sep=',')
  
  json_response(df_models.info())

---
sets: 
  - new_key
  - new_url
  - is_sent
code: |
  if defined('email'):
    is_sent = background_action('send_mail', email=email)
  else:
    is_sent = True
    
  import string
  import random
  
  new_key = ''.join(random.choices(string.ascii_uppercase + string.digits, k=10))
  new_url = str(interview_url_action('second_step'))
  new_url_with_key = interview_url(i='docassemble.playground4:getform.yml') + '&key' + new_key
  #key = r.key(new_key)
  r.set(new_key, new_url )
  
  myQR.initialize(filename="qr.png")
  qrcode.make(new_url).save(myQR.path())

---
objects:
  r: DARedis
---
event: send_mail
code: |
  
  email = action_argument('email')
  
  if email:
    send_email(to=email, template=ag_email_template)
    
    background_response(f'E-Mail an {email} gesendet')
  else:
    background_response(f'keine E-Mail angegeben')
  

---
event: employer_wait_for_employee
question: |
  Angaben durch den Mitarbeiter
subquestion: |
  
  ${ ask_employee.pdf }
    
  Bitte drucken Sie folgende [PDF-Datei] aus und übergeben Sie den Ausdruck an den neuen Mitarbeiter. Sobald dieser seine Angaben geliefert hat, werden Sie via E-Mail benachrichtigt.
  
  [download as Word]: ${ ask_employee.url_for() }
  [PDF-Datei]: ${ ask_employee.pdf.url_for() }

#  ${ is_sent }
#  % if defined('email'):
#    E-Mail an .. geschickt.
#  % else:
#    Bitte drucken Sie diese Seite und geben Sie den QR-Code an den neuen #Mitarbeiter.
#  % endif  
css: |
  <style>
   svg {background-color: white}
  </style>  
  
secction: waiting
buttons:
  - Restart: restart
  - Exit: http:\\kanzlei-spaeth.de
---
objects:
  other_jobs: DAList.using(object_type=Thing, there_are_any=True)
---
question: |
  Erzähle uns über Deine anderen Nebenjobs.
fields:
  - Arbeitgeber: other_jobs[i].name.text
  - Von: other_jobs[i].start
    datatype: date
  - Bis: other_jobs[i].end
    datatype: date
  - Art der Tätigkeit: other_jobs[i].description
  - Wöchentliche Arbeitszeit: other_jobs[i].hours
    datatype: number
    step: 0.001
list collect:
  enable: not other_jobs.has_been_gathered()
  is final: True
  #allow delete: False
  add another label: Job hinzufügen
  label: |
    ${ i+1 }.
continue button field: test_list
---
event: second_step
code: |
  the_sections = []
  the_sections.append({'employee_questions':'Fragen'})
  the_sections.append({'employee_documents':'Unterlagen'})
  the_sections.append({'employee_sign':'Unterschrift'})
  nav.set_sections(the_sections)
  employee_personal_questionaire
  if is_further_employment and not defined('test_list'):
    other_jobs.appendObject()
    other_jobs.gather(minimum=1)
  employee_doc
  an_signature

  send_res = send_email(to='tho.spaeth@gmail.com', template=kanzlei_email_template, attachments=[doc_soz_vers, an_signature, lodas_file])
  
  final_an_2
  

---
event: final_an_2
question: |
  Danke 
subquestion: |
  für die Beantwortung der Fragen und Unterlagen. Wir nehmen jetzt die Anmeldung und Verträge für Sie vor.
#  ${ send_res }
---
event: employer_questionaire_2
question: |
  Dein Name ist ${ employee_personal_qustionaire }.
---
mandatory: True
code: |
  if not user_logged_in():
  #if defined('employee_details'):
    second_step
  else:
    first_step
---
event: first_step

code: |
  the_sections = []
  the_sections.append({'contract':'Vertragsangaben'})
  the_sections.append({'employee':'Mitarbeiterangaben'})
  the_sections.append({'waiting':'Zusammenfassung'})
  nav.set_sections(the_sections)
  
  contract_details
  employee_details
  
  nav.set_section('waiting')
  employer_wait_for_employee
  #street_no
  #final_screen